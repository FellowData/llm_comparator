import streamlit as st

def render_model_selector(filtered_models, model_service):
    """
    Composant pour la s√©lection des mod√®les avec checkboxes
    
    Args:
        filtered_models (dict): Mod√®les filtr√©s √† afficher
        model_service: Instance du ModelConfigService
        
    Returns:
        list: Liste des noms de mod√®les s√©lectionn√©s
    """
    if not filtered_models:
        return []
    
    st.divider()
    
    # R√©cup√©rer le dictionnaire pour compatibilit√©
    models_dict = model_service.get_raw_models_dict()
    
    # === S√âLECTION DES MOD√àLES ===
    # Option "Select All" / "Deselect All" pour les mod√®les filtr√©s
    col_all, col_none = st.columns(2)
    with col_all:
        if st.button("‚úÖ Select All Filtered"):
            # D√©selectionner tous d'abord
            for i in range(len(models_dict)):
                st.session_state[f"model_{i}"] = False
            # Puis s√©lectionner seulement les filtr√©s
            for name in filtered_models.keys():
                original_index = list(models_dict.keys()).index(name)
                st.session_state[f"model_{original_index}"] = True
    
    with col_none:
        if st.button("‚ùå Deselect All"):
            for i in range(len(models_dict)):
                st.session_state[f"model_{i}"] = False
    
    st.divider()

    # Organiser les mod√®les filtr√©s par provider
    providers_filtered = {}
    for name, model_info in filtered_models.items():
        # Convertir ModelInfo en dict si n√©cessaire
        if hasattr(model_info, 'to_dict'):
            model_data = model_info.to_dict()
        else:
            model_data = model_info
            
        provider = model_data.get("provider_to_display", "Unknown")
        if provider not in providers_filtered:
            providers_filtered[provider] = []
        providers_filtered[provider].append((name, model_data))
    
    selected = []
    
    # Affichage par provider
    for provider, models in providers_filtered.items():
        st.subheader(f"üîß {provider.title()}")
        cols = st.columns(min(3, len(models)))
        
        for i, (name, model_data) in enumerate(models):
            # Trouver l'index original dans models_dict
            original_index = list(models_dict.keys()).index(name)
            col_index = i % len(cols)
            
            with cols[col_index]:
                # Valeurs par d√©faut : les 2 premiers mod√®les disponibles
                default_value = len(selected) < 2
                checkbox_key = f"model_{original_index}"
                
                # Initialiser la session state si elle n'existe pas
                if checkbox_key not in st.session_state:
                    st.session_state[checkbox_key] = default_value
                
                # Cr√©er le label avec indicateurs
                label = _create_model_label(name, model_data)
                help_text = _create_help_text(model_data)
                
                if st.checkbox(
                    label, 
                    value=st.session_state[checkbox_key], 
                    key=checkbox_key,
                    help=help_text
                ):
                    selected.append(name)
    
    return selected


def _create_model_label(name, model_data):
    """
    Cr√©e le label d'affichage pour un mod√®le avec indicateurs visuels
    
    Args:
        name (str): Nom du mod√®le
        model_data (dict): Informations du mod√®le (format dict)
        
    Returns:
        str: Label format√© avec √©mojis indicateurs
    """
    indicators = []
    if model_data.get("free", False):
        indicators.append("üÜì")
    else:
        indicators.append("üí∞")
    
    if model_data.get("web_search", False):
        indicators.append("üåê")
    
    return f"{' '.join(indicators)} {name}"


def _create_help_text(model_data):
    """
    Cr√©e le texte d'aide (tooltip) pour un mod√®le
    
    Args:
        model_data (dict): Informations du mod√®le (format dict)
        
    Returns:
        str: Texte d'aide format√©
    """
    return (f"Provider: {model_data.get('provider_to_display', 'Unknown')} | "
            f"Free: {'Yes' if model_data.get('free', False) else 'No'} | "
            f"Web Search: {'Yes' if model_data.get('web_search', False) else 'No'}")


def render_selection_summary(selected, model_service):
    """
    Affiche un r√©sum√© des mod√®les s√©lectionn√©s
    
    Args:
        selected (list): Liste des mod√®les s√©lectionn√©s
        model_service: Instance du ModelConfigService
    """
    if selected:
        from ui.components.model_filters import get_filter_stats
        stats_text = get_filter_stats(selected, model_service)
        if stats_text:
            st.info(stats_text)
    else:
        st.warning("‚ö†Ô∏è Please select at least one model to continue.")


def reset_model_selection():
    """
    Utilitaire pour r√©initialiser toutes les s√©lections de mod√®les
    """
    # Obtenir toutes les cl√©s de session qui correspondent aux mod√®les
    model_keys = [key for key in st.session_state.keys() if key.startswith("model_")]
    for key in model_keys:
        st.session_state[key] = False


def select_default_models(model_service, count=2):
    """
    S√©lectionne automatiquement les premiers mod√®les disponibles
    
    Args:
        model_service: Instance du ModelConfigService
        count (int): Nombre de mod√®les √† s√©lectionner par d√©faut
    """
    models_dict = model_service.get_raw_models_dict()
    available_models = model_service.get_available_models()
    
    # R√©initialiser d'abord
    reset_model_selection()
    
    # S√©lectionner les premiers mod√®les disponibles
    selected_count = 0
    for i, (name, model_info) in enumerate(models_dict.items()):
        if name in available_models and selected_count < count:
            st.session_state[f"model_{i}"] = True
            selected_count += 1